{
    "collab_server" : "",
    "contents" : "#dependent on .Rdata, alpha-NTI from 2Ordination&Permanova\nload(\"D:\\\\World Forest Data\\\\Fuyang\\\\data\\\\.Rdata\")\n\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(dunn.test)\nlibrary(ape)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(RColorBrewer)\nlibrary(vegan)\nlibrary(picante)\nlibrary(data.table)\nlibrary(GUniFrac)\nlibrary(vegan)\nlibrary(picante)\nlibrary(parallel)\nsource(\"grid_arrange_shared_legend.R\")\nsource(\"stat_bag.R\")\nscaleFUN <- function(x) sprintf(\"%.1f\", x)\nmat2vec<-function(x,triangle=FALSE,data.in=NULL){\n  #to convert a matrix or data.frame to three vectors: value,rname,cname\n  #especially when the matrix or data.frame is symmetric or triangle.\n  rownames(x)->rnam\n  colnames(x)->cnam\n  if(!is.matrix(x)){\n    if(is.data.frame(x)) as.matrix(x)->x\n    else stop(\"Input is not a dataframe or matrix.\")\n  }\n  #to test if it's triangle or sysmetric\n  if(isSymmetric(x)){\n    if(!identical(rnam,cnam)) warning(\"Row names is not equal \n                                      to Col names.\")\n    triangle=TRUE\n    data.in=\"lower\"\n  }\n  if(triangle){\n    if(!identical(rnam,cnam)) warning(\"Row names is not equal \n                                      to Col names.\")\n    if(data.in==\"lower\") x[upper.tri(x,diag=TRUE)]<-NA\n    else if(data.in==\"upper\") x[lower.tri(x,diag=TRUE)]<-NA\n    else stop(\"You said it's a triangle matrix, but where is\n              the data?\")\n  }\n  #to convert\t\n  c(x)->value\n  rep(rnam,time=length(cnam))->rowname\n  c(matrix(rep(cnam,time=length(rnam)),byrow=T,nrow=length(rnam),\n           ncol=length(cnam)))->colname\n  data.frame(value,rowname,colname)->y\n  if(triangle){\n    y[!is.na(y$value),]->y\n    rownames(y)<-1:length(rownames(y))\n  }\n  y\n}\nmyfunc2<-function(data,Sample.Type,color){\n  laymat=matrix(c(rep(c(rep.int(1,3),NA),times=1),\n                  rep(c(rep.int(2,3),4),times=3),\n                  rep(c(rep.int(3,3),5),times=3),\n                  rep(6,8)),\n                nrow=4,byrow = FALSE)\n  scaleFUN <- function(x) sprintf(\"%.1f\", x)\n  \n  ggplot(data,aes(MDS1,colour=Sample.Type,fill=Sample.Type))+\n    geom_density(adjust=2,alpha=0.5)+\n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.ticks.x=element_blank(),\n                         axis.text.y=element_text(angle = 90,hjust = 0.5),\n                         legend.position=\"none\")+\n    scale_y_continuous(labels=scaleFUN)+labs(x = \"NMDS1\")+\n    scale_fill_manual(values = color)+scale_color_manual(values = color)+coord_flip()+\n    xlim(-0.4,0.4)->pic1\n  \n  ggplot(data, aes(MDS2, MDS1, colour = Sample.Type, fill = Sample.Type)) +\n    geom_point(size = 2) + \n    stat_bag(prop = 1, alpha = 0.4, show.legend = T) + \n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         #                         legend.key.height=unit(0.35,\"inch\"),\n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.title.y=element_blank(),\n                         axis.text.y=element_blank()) + \n    scale_color_manual(values = color) + \n    scale_fill_manual(values = color) + \n    ylim(-0.4,0.4)+xlim(-0.35,0.35)->pic2\n  ggplot(data, aes(MDS3, MDS1, colour = Sample.Type, fill = Sample.Type)) +\n    geom_point(size = 2) + \n    stat_bag(prop = 1, alpha = 0.4, show.legend = T) + \n    theme_bw(12) + theme(panel.grid = element_blank(), \n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.title.y=element_blank(),\n                         axis.text.y=element_blank(),\n                         legend.position=\"none\") + \n    scale_color_manual(values = color) + \n    scale_fill_manual(values = color) +\n    ylim(-0.4,0.4)+xlim(-0.25,0.2)->pic3\n  \n  ggplot(data,aes(MDS2,colour=Sample.Type,fill=Sample.Type))+\n    geom_density(adjust=2,alpha=0.5)+\n    theme_bw(12) + \n    theme(panel.grid = element_blank(), \n          axis.title.y=element_blank(),\n          axis.text.y=element_blank(),\n          axis.ticks.y=element_blank(),\n          legend.position=\"none\")+\n    scale_y_continuous(labels=scaleFUN)+\n    scale_fill_manual(values = color)+scale_color_manual(values = color)+\n    xlim(-0.35,0.35)+labs(x = \"NMDS2\")->pic4\n  ggplot(data,aes(MDS3,colour=Sample.Type,fill=Sample.Type))+\n    geom_density(adjust=2,alpha=0.5)+\n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         axis.title.y=element_blank(),\n                         axis.text.y=element_blank(),\n                         axis.ticks.y=element_blank(),\n                         legend.position=\"none\")+\n    scale_y_continuous(labels=scaleFUN)+\n    scale_fill_manual(values = color)+scale_color_manual(values = color)+\n    xlim(-0.25,0.2)+labs(x = \"NMDS3\")->pic5\n  \n  g<-ggplotGrob(pic2)$grobs\n  legend <- g[[which(sapply(g, function(x) x$name) == \"guide-box\")]]\n  pic2<-pic2+theme(legend.position=\"none\")\n  grid.arrange(pic1,pic2,pic3,pic4,pic5,legend,layout_matrix=laymat)\n}\nmyfunc3<-function(data,Sample.Type,color){\n  laymat=matrix(\n        c(rep(c(4,2,2,2),3),\n          rep(c(5,3,3,3),3),\n          rep(c(NA,1,1,1),1)),\n    nrow=7,byrow = TRUE)\n  scaleFUN <- function(x) sprintf(\"%.1f\", x)\n  \n  ggplot(data,aes(MDS1,colour=Sample.Type,fill=Sample.Type))+\n    geom_density(adjust=2,alpha=0.5)+\n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         axis.title.y=element_blank(),\n                         axis.text.y=element_blank(),\n                         axis.ticks.y=element_blank(),\n                         legend.position=\"none\")+\n    scale_y_continuous(labels=scaleFUN)+\n    scale_fill_manual(values = color)+scale_color_manual(values = color)+\n    xlim(-0.4,0.4)+labs(x = \"NMDS1\")->pic1\n  \n  ggplot(data, aes(MDS1, MDS2, colour = Sample.Type, fill = Sample.Type)) +\n    geom_point(size = 2) + \n    stat_bag(prop = 1, alpha = 0.4, show.legend = T) + \n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         #legend.key.height=unit(0.35,\"inch\"),\n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.title.y=element_blank(),\n                         axis.text.y=element_blank(),\n                         legend.position=\"none\") + \n    scale_color_manual(values = color) + \n    scale_fill_manual(values = color) + \n    xlim(-0.4,0.4)+ylim(-0.35,0.35)->pic2\n  ggplot(data, aes(MDS1, MDS3, colour = Sample.Type, fill = Sample.Type)) +\n    geom_point(size = 2) + \n    stat_bag(prop = 1, alpha = 0.4, show.legend = T) + \n    theme_bw(12) + theme(panel.grid = element_blank(), \n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.title.y=element_blank(),\n                         axis.text.y=element_blank(),\n                         legend.position=c(0.5,0.1),\n                         legend.title=element_blank(),legend.direction= \"horizontal\") + \n    scale_color_manual(values = color) + \n    scale_fill_manual(values = color) +\n    xlim(-0.4,0.4)+ylim(-0.3,0.2)->pic3\n  \n  ggplot(data,aes(MDS2,colour=Sample.Type,fill=Sample.Type))+\n    geom_density(adjust=2,alpha=0.5)+\n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.ticks.x=element_blank(),\n                         axis.text.y=element_text(angle = 90,hjust = 0.5),\n                         legend.position=\"none\")+\n    scale_y_continuous(labels=scaleFUN)+labs(x = \"NMDS2\")+\n    scale_fill_manual(values = color)+scale_color_manual(values = color)+coord_flip()+\n    xlim(-0.35,0.35)->pic4\n  ggplot(data,aes(MDS3,colour=Sample.Type,fill=Sample.Type))+\n    geom_density(adjust=2,alpha=0.5)+\n    theme_bw(12) + theme(panel.grid = element_blank(),\n                         axis.title.x=element_blank(),\n                         axis.text.x=element_blank(),\n                         axis.ticks.x=element_blank(),\n                         axis.text.y=element_text(angle = 90,hjust = 0.5),\n                         legend.position=\"none\")+\n    scale_y_continuous(labels=scaleFUN)+labs(x = \"NMDS3\")+\n    scale_fill_manual(values = color)+scale_color_manual(values = color)+coord_flip()+\n    xlim(-0.3,0.2)->pic5\n  \n#  g<-ggplotGrob(pic2)$grobs\n#  legend <- g[[which(sapply(g, function(x) x$name) == \"guide-box\")]]\n#  pic2<-pic2+theme(legend.position=\"none\")\n  grid.arrange(pic1,pic2,pic3,pic4,pic5,layout_matrix=laymat)\n}\nisUnburnt<-1:12\nisPyOM<-13:33\nisBurnt<-34:45\nfactor(Sample.Type,levels = c(\"UnburntSoil\",\"BurntSoil\",\"PyOM\"))->Sample.Type\n\n#data\ndiversity(rare)->shannon\nshannon\nkruskal.test(shannon~Sample.Type)\npd(rare,root.phylotre)$PD->faith\nfaith\npielou=shannon/log(vegan::specnumber(rare)) #Pielou's J for evenness\npielou\nObservedOTU=vegan::specnumber(rare)\nD=vegan::specnumber(rare)/sqrt(rowSums(rare)) #Species number can be used as richness. Menhinick's index\nses.mntd(rare,cophenetic(root.phylotre),null.model =\"taxa.labels\",\n         abundance.weighted=TRUE)->NTI.df #alphaNTI, abundance=T\nNTI<-data.frame(NTI=-NTI.df$mntd.obs.z,SampaleType=Sample.Type)\nfactor(NTI$SampaleType,levels = c(\"UnburntSoil\",\"BurntSoil\",\"PyOM\"))->NTI$SampaleType\nNTI->aNTI\npH=c(5.112,4.422,5.188,4.160,4.187,4.025,4.028,4.081,3.895,4.009,3.844,4.011,\n     NA,NA,NA,NA,NA,NA,NA,NA,NA,\n     4.898,5.749,5.666,6.415,5.583,5.353,5.814,6.008,6.107,5.955,NA,6.186,\n     4.729,4.670,4.720,5.088,5.555,4.694,5.367,4.676,4.680,4.678,4.782,4.711)\nwatercontent=c(17.34,15.42,17.18,34.73,38.98,40.98,35.11,38.70,42.71,33.37,32.49,37.53,\n               NA,NA,NA,NA,NA,NA,NA,NA,NA,\n               87.28,85.90,87.74,82.73,80.80,83.28,87.29,86.34,85.92,87.40,92.86,86.07,\n               23.16,27.05,25.03,17.62,21.18,21.69,18.57,29.06,26.09,24.40,24.10,26.03)\nDOC=c(4.85,11.4,1.60,39.28,50.45,65.97,84.02,41.37,68.56 ,50.52,93.45,74.20,\n      rep(NA,21),\n  17.85,24.65,17.3,9.95,10.15,14.75,15.65,33.15,21.65,8.25,24.6,21.95)#significant\nTOC=c(13.40,55.76,10.50,85.13,104.95,143.30,89.89,101.75,171.22,112.90,111.42,108.90,\n      rep(NA,21),\n      78.25,65.99,109.10,92.76,55.78,67.60,67.69,76.76,38.19,39.13,115.40,141.70)#no difference\ndata.frame(sample=Sample.Type,pH=pH,Shannon.Wiener=shannon,alphaNTI=aNTI$NTI)->description1\ndata.frame(sample=Sample.Type,Faith=faith,Pielou=pielou,ObservedOTU=ObservedOTU,\n           SoilOrganicCarbon=TOC,DissolvableOrganicCarbon=DOC)->descriptionS1\n\n#Physichemical Properties Fig1\nmelt(description1,id=1)->description1.melt\nfactor(description1$sample,levels = c(\"UnburntSoil\",\"BurntSoil\",\"PyOM\"))->description1$sample\nlevels(description1.melt$sample)<-c(\"Unburnt\\nSoil\",\"Burnt\\nSoil\",\"PyOM\")\ndata.table(description1.melt)->description1.melt\ndescription1.melt[variable==\"alphaNTI\",y_min := 1]  #just to set the limits of facet\ndescription1.melt[variable==\"alphaNTI\",y_max := 9]\ndescription1.melt[variable==\"Shannon.Wiener\",y_min := 4]\ndescription1.melt[variable==\"Shannon.Wiener\",y_max := 7]\ndescription1.melt[variable==\"pH\",y_min := 3.5]\ndescription1.melt[variable==\"pH\",y_max := 7]\nlevels(description1.melt$variable)<-c(\"pH\",expression(\"Shannon\"*\"-\"*\"Wiener\"),expression(alpha*\"NTI\"))\nggplot(data=description1.melt, aes(x=sample,y=value))+\n  #  geom_segment(x=1,y=100,xend=2,yend=100,size=0.5,inherit.aes = F)+geom_segment(x=1,y=150,xend=3,yend=150,size=0.5,inherit.aes = F)+\n  geom_violin(aes(fill=sample),linetype=0)+geom_boxplot(width=0.2,lwd=0.2,outlier.size = 0.7)+\n  geom_blank(aes(y = y_min))+geom_blank(aes(y = y_max))+  #just to set the limits of facet\n  facet_wrap(~ variable, scales=\"free\", nrow=1, labeller = label_parsed)+\n  theme_bw(base_size=10)+ guides(fill=FALSE)+\n  theme(panel.grid = element_blank(),\n        axis.title.x=element_blank(),\n        axis.title.y=element_blank(), \n        axis.text.x = element_text(color=\"black\"),\n        axis.text.y = element_text(color=\"black\"))+\n  scale_fill_manual(values=c(color3,color1,color2))->pic1\n\n#Physichemical Properties FigS1\nmelt(descriptionS1,id=1)->descriptionS1.melt\nfactor(descriptionS1.melt$sample,levels = c(\"UnburntSoil\",\"BurntSoil\",\"PyOM\"))->descriptionS1.melt$sample\nlevels(descriptionS1.melt$sample)<-c(\"Unburnt\\nSoil\",\"Burnt\\nSoil\",\"PyOM\")\n#mylabel = bquote(Delta*italic(T)[max]~.(format(mymean,digits=3))*''%+-%''*\n#                   .(format(mySE,digits=2))*degree*C)\ndata.table(descriptionS1.melt)->descriptionS1.melt\ndescriptionS1.melt[variable==\"Faith\",y_min := 50]\ndescriptionS1.melt[variable==\"Faith\",y_max := 200]\ndescriptionS1.melt[variable==\"SoilOrganicCarbon\",y_min := 0]\ndescriptionS1.melt[variable==\"SoilOrganicCarbon\",y_max := 200]\ndescriptionS1.melt[variable==\"DissolvableOrganicCarbon\",y_min := 0]\ndescriptionS1.melt[variable==\"DissolvableOrganicCarbon\",y_max := 100]\ndescriptionS1.melt[variable==\"Pielou\",y_max := 0.9]\ndescriptionS1.melt[variable==\"ObservedOTU\",y_max := 2500]\nlevels(descriptionS1.melt$variable)<-c(expression(\"Faith's\"~\"Diversity\"),expression(\"Pielou's\"~\"J\"),\"Observed~OTUs\",\n                                     \"TOC~(gC/kgDw)\",\"DOC~(mgC/kgDw)\")\n#segdata<-data.frame(sample=levels(description.melt$sample),variable=levels(description.melt$variable),)\nggplot(data=descriptionS1.melt, aes(x=sample,y=value))+\n  #  geom_segment(x=1,y=100,xend=2,yend=100,size=0.5,inherit.aes = F)+geom_segment(x=1,y=150,xend=3,yend=150,size=0.5,inherit.aes = F)+\n  geom_violin(aes(fill=sample),linetype=0)+geom_boxplot(width=0.2,lwd=0.2)+\n  geom_blank(aes(y = y_min))+geom_blank(aes(y = y_max))+  #just to set the limits of facet\n  facet_wrap(~ variable, scales=\"free\", nrow=1, labeller = label_parsed)+\n  theme_bw(base_size=12)+ guides(fill=FALSE)+\n  theme(panel.grid = element_blank(),\n        axis.title.x=element_blank(),\n        axis.title.y=element_blank(), \n        axis.text.x = element_text(color=\"black\"),\n        axis.text.y = element_text(color=\"black\"))+\n  scale_fill_manual(values=c(color3,color1,color2))->picS1\n\n#normality test failed hence wilcox-bonferroni was used\nnortest::lillie.test(shannon[isUnburnt])\nnortest::lillie.test(faith[isUnburnt])\nnortest::lillie.test(pH[isUnburnt])\nnortest::lillie.test(pielou[isBurnt])\nnortest::lillie.test(ObservedOTU[isUnburnt])\ndunn.test::dunn.test(description$Shannon.Wiener,description$sample,\"bonferroni\")\ndunn.test::dunn.test(description$Faith,description$sample,\"bonferroni\")\ndunn.test::dunn.test(description$pH,description$sample,\"bonferroni\")\ndunn.test::dunn.test(pielou,Sample.Type,\"bonferroni\") \ndunn.test::dunn.test(ObservedOTU,Sample.Type,\"bonferroni\")\n\n#normality holds so t-test is OK\nt.test(description$SoilOrganicCarbon~Sample.Type,na.action = \"na.omit\",var.equal = TRUE)\n#replicate(99999,{temp<-sample(c(isBurnt,isUnburnt));mean(TOC[temp[1:12]]-TOC[temp[13:24]])})->test\n#(length(test[test<mean(TOC[isBurnt]-TOC[isUnburnt])])+1)/(99999+1)*2 #permutation test give a similar result\nt.test(description$DissolvableOrganicCarbon~Sample.Type,na.action = \"na.omit\",var.equal = FALSE)\n#replicate(99999,{temp<-sample(c(isBurnt,isUnburnt));mean(DOC[temp[1:12]]-DOC[temp[13:24]])})->test\n#(length(test[test<mean(DOC[isBurnt]-DOC[isUnburnt])])+1)/(99999+1)*2 #permutation test give a similar result\n#equal to pair-wise unequal t-test with bonferroni correction, result is similar to dunn.test\npairwise.t.test(aNTI$NTI,Sample.Type,\"bonferroni\",pool.sd = FALSE)\n\n#Charcoal Elements\nread.csv(\"CharcoalElementsAtom.csv\",head=TRUE)->elementsRatio\nnames(elementsRatio)[1]<-c(\"C\")\ncbind(sample=1:12,elementsRatio)->elementsRatio\nelementsRatio.m<-melt(elementsRatio,id=1)\nggplot(elementsRatio.m,aes(sample,value))+\n  geom_col(aes(fill=variable),position = position_stack(reverse = TRUE))+\n  scale_fill_manual(name=\"Elements\",values = brewer.pal(12,\"Paired\")[c(2,4,6,10,7)])+\n  #scale_fill_brewer(type=\"qual\",palette = 6,name=\"Elements\")+\n  xlab(\"PyOM\")+ylab(\"Ratio (atom) /%\")+\n  theme_bw(12)+ \n  theme(panel.grid = element_blank(), axis.text.x = element_blank(),\n        axis.text.y = element_text(color=\"black\"))->PyOM.element.ratio\n\n#PhylumAbundance\nread.csv(\"PhylumAbundance.csv\",header =TRUE)->phylumAbundance\ncbind(Sample.Type,phylumAbundance)->phylumAbundance\nphylumAbundance.m<-melt(phylumAbundance,id=c(1,2))\nnames(phylumAbundance.m)[c(2,3)]<-c(\"sample\",\"Phylum\")\nfactor(phylumAbundance.m$Sample.Type,levels = c(\"UnburntSoil\",\"BurntSoil\",\"PyOM\"))->\n  phylumAbundance.m$Sample.Type\nphylumAbundance.m$value<-phylumAbundance.m$value/1000\nggplot(phylumAbundance.m,aes(sample,value))+\n  geom_col(aes(fill=Phylum),position = position_stack(reverse = TRUE))+\n  facet_grid(~ Sample.Type, scales = \"free_x\", space = \"free_x\")+\n  scale_fill_brewer(type=\"qual\",palette = 3)+\n  ylab(\"Counts (x1000)\")+\n  theme_bw(12)+ \n  theme(panel.grid = element_blank(), axis.title.x=element_blank(),axis.ticks.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(color=\"black\"))->phylumabundance.pic\n\n#Ordination\nGUniFrac(rare,root.phylotre)->unifrac\nunifrac$unifracs[,,\"d_0.5\"]->w0.5unifrac\nadonis(w0.5unifrac~Class1,permutations = 999999) #p<e-6,based on factor model\nadonis(w0.5unifrac~meta$meta,permutations = 999999) #p<e-6,based on linear model, more precise\nadonis(w0.5unifrac[isPyOM,isPyOM]~Class2) #p=0.894\n\nmetaMDS(comm = w0.5unifrac,k =3)->NMDS0.5uf #stress=0.06\nas.data.frame(NMDS0.5uf$points)->NMDS0.5uf.point\nNMDS0.5uf.point$MDS1<- -NMDS0.5uf.point$MDS1 #-MDS1 was used for convenience, the same direct as PyOM gradient\nmyfunc3(NMDS0.5uf.point,Sample.Type,color=c(color3,color1,color2))->ordinationAll\nmyfunc2(NMDS0.5uf.point[isPyOM,],PyOM.Type,color=RColorBrewer::brewer.pal(10, \"Set3\")[c(6,10)])->ordinationSub\n\n#Shannon vs NMDS1\nShannon.NMDS1<-data.frame(sample=Sample.Type,Shannon=shannon,NMDS1=NMDS0.5uf.point$MDS1)\nsummary(lm(shannon ~ poly(NMDS0.5uf.point$MDS1,degree=2)))\nggplot(data=Shannon.NMDS1,aes(x=NMDS1,y=Shannon))+\n  annotate(\"text\", x = 0.25, y = 6.5,\n           label = \"paste(italic(R) ^ 2, \\\" = .53\\\")\", parse = TRUE)+\n  annotate(\"text\", x = 0.25, y = 6.35,\n           label = \"paste(italic(P),\\\" = \\\",10^-7)\", parse = TRUE)+\n  geom_point(aes(color=sample))+\n  stat_smooth(method=\"lm\", formula=y~poly(x,2), size=0.75, color=\"gray15\")+\n  theme_bw(12)+\n  scale_colour_manual(name= NULL,values=c(color3,color1,color2))+\n  ylab(\"Shannon-Wiener\")+\n  theme(panel.grid = element_blank(), \n        legend.position = c(0.5,0.1),legend.direction= \"horizontal\",\n        legend.background = element_rect(color = \"black\",size = 0.25, linetype = \"solid\"),\n        axis.text.y = element_text(color=\"black\"))->Shannon.vs.NMDS1\n#pH vs NMDS1\nindex<-which(!is.na(pH))\nsummary(lm(shannon[index] ~ poly(pH[index],degree=2)))  \nsummary(lm(pH ~ NMDS0.5uf.point$MDS1))\nqplot(pH,shannon,color=Sample.Type)+\n  stat_smooth(method=\"lm\", formula=y~poly(x,2), size=0.75, color=\"gray15\")+\n  theme_bw(12)+theme(panel.grid = element_blank(), \n                     axis.text.y = element_text(color=\"black\"))+\n  labs(x=\"pH\",y=\"Shannon-Wiener Index\")+\n  annotate(\"text\", x = 4.2, y = 6.5,\n           label = \"paste(italic(R) ^ 2, \\\" = .64\\\")\", parse = TRUE)+\n  annotate(\"text\", x = 4.2, y = 6.35,\n           label = \"paste(italic(P),\\\" = 1x\\\",10^-7)\", parse = TRUE)->pHvsShannon\nqplot(pH,NMDS0.5uf.point$MDS1,color=Sample.Type)+\n  stat_smooth(method=\"lm\", formula=y~x, size=0.75, color=\"gray15\")+\n  theme_bw(12)+theme(panel.grid = element_blank(), \n                     axis.text.y = element_text(color=\"black\"))+\n  labs(x=\"pH\",y=\"NMDS1\")+\n  annotate(\"text\", y = 0.325, x = 4.2,\n           label = \"paste(italic(R) ^ 2, \\\" = .68\\\")\", parse = TRUE)+\n  annotate(\"text\", y = 0.275, x = 4.2,\n           label = \"paste(italic(P),\\\" = 1x\\\",10^-9)\", parse = TRUE)->NMDS1vspH\ngrid_arrange_shared_legend(pHvsShannon,NMDS1vspH,nrow=1)->pHvsNMDS1.shannon\n\n\n\n#Procrustes test for BCU-BCW, BCW-Burnt and BCU-Burnt\nvegan::protest(X=NMDS0.5uf.point[13:21,],\n               Y=NMDS0.5uf.point[c(23,24,25,26,28,30,31,32,33),],\n               permutation=99999,symmetric=FALSE) #Unwashed vs. washed\nvegan::protest(X=NMDS0.5uf.point[22:33,],Y=NMDS0.5uf.point[34:45,],\n               permutation=99999,symmetric=FALSE)->protest1 #Washed, p=0.003, R=0.68\nvegan::protest(X=NMDS0.5uf.point[13:21,],\n               Y=NMDS0.5uf.point[c(23,24,25,26,28,30,31,32,33)+12,],\n               permutation=99999,symmetric=FALSE)->protest2 #Unwashed, p=4e-4, R=.84\n\n\n\n#Final Output\n#Fig3\nmargin<-12\nlayoutmatrix<-cbind(matrix(rep(3,7*4*margin),nrow=7),\n                    rbind(cbind(matrix(rep(NA,3*4),nrow=3),\n                                matrix(rep(1,3*4*(margin-1)),nrow = 3)),\n                          matrix(rep(2,4*4*margin),nrow=4)))\ngridExtra::grid.arrange(pic1,Shannon.vs.NMDS1,ordinationAll, layout_matrix=layoutmatrix)\n#FigS3\nlayoutmatrix<-matrix(c(1,1,2,2,3,3,3,4),nrow = 2,byrow = T)\ngridExtra::grid.arrange(phylumabundance.pic,ordinationSub,picS1,\n                        PyOM.element.ratio,layout_matrix=layoutmatrix)\n#FigS8 procrustes test for BCU-BCW, BCW-Burnt and BCU-Burnt\nplot(protest1)\nplot(protest2)\n#FigS9 pH vs NMDS1,shannon\ngrid_arrange_shared_legend(pHvsShannon,NMDS1vspH,nrow=1)\n  ",
    "created" : 1533108173075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "20|49|55|0|\n56|42|127|0|\n128|42|201|0|\n",
    "hash" : "1044913651",
    "id" : "AA7C4FD5",
    "lastKnownWriteTime" : 1541926201,
    "last_content_update" : 1541926201247,
    "path" : "D:/World Forest Data/Fuyang/data/1&2 Description and Ordinations combination/Description.R",
    "project_path" : "Description.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}